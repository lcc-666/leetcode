"""
给你一个大小为 m x n 的二进制矩阵 grid 。

岛屿是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

岛屿的面积是岛上值为 1 的单元格的数目。

计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。

示例 1： 输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,
0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,
0,0,0,0]] 输出：6 解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。

示例 2：
输入：grid = [[0,0,0,0,0,0,0,0]]
输出：0
"""


class Solution:
    def __init__(self):
        self.grid = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                     [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
                     [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]

    def maxAreaOfIsland(self):
        grid = self.grid
        # 算法部分
        w = len(grid[0])
        h = len(grid)

        def DFS(r, c, count):
            grid[r][c] = 0
            count += 1
            if r - 1 >= 0 and grid[r - 1][c] == 1:
                count += DFS(r - 1, c, 0)

            if r + 1 < h and grid[r + 1][c] == 1:
                count += DFS(r + 1, c, 0)

            if c - 1 >= 0 and grid[r][c - 1] == 1:
                count += DFS(r, c - 1, 0)

            if c + 1 < w and grid[r][c + 1] == 1:
                count += DFS(r, c + 1, 0)
            return count

        count = 0
        max = 0
        for i in range(h):
            for j in range(w):
                if grid[i][j] == 1:
                    s = DFS(i, j, count)
                    if max < s:
                        max = s
        return max


if __name__ == '__main__':
    t = Solution()
    s = t.maxAreaOfIsland()
    print(s)
